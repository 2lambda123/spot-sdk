// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

syntax = "proto3";

package bosdyn.api;

option java_outer_classname = "BasicCommandProto";

import "bosdyn/api/geometry.proto";
import "bosdyn/api/trajectory.proto";
import "google/protobuf/timestamp.proto";

message RobotCommandFeedbackStatus {
    enum Status {
        /// Behavior execution is in an unknown / unexpected state.
        STATUS_UNKNOWN = 0;

        /// The robot is actively working on the command
        STATUS_PROCESSING = 1;

        /// The command was replaced by a new command
        STATUS_COMMAND_OVERRIDDEN = 2;

        /// The command expired
        STATUS_COMMAND_TIMED_OUT = 3;

        /// The robot is in an unsafe state, and will only respond to known safe commands.
        STATUS_ROBOT_FROZEN = 4;

        /// The request cannot be executed because the required hardware is missing.
        /// For example, an armless robot receiving a synchronized command with an arm_command
        /// request will return this value in the arm_command_feedback status.
        STATUS_INCOMPATIBLE_HARDWARE = 5;
    }
}

// Get the robot into a convenient pose for changing the battery
message BatteryChangePoseCommand {
    message Request {
        enum DirectionHint {
            // Unknown direction, just hold still
            HINT_UNKNOWN = 0;
            // Roll over right (right feet end up under the robot)
            HINT_RIGHT = 1;
            // Roll over left (left feet end up under the robot)
            HINT_LEFT = 2;
        }
        DirectionHint direction_hint = 1;
    }

    message Feedback {
        enum Status {
            STATUS_UNKNOWN = 0;
            // Robot is finished rolling
            STATUS_COMPLETED = 1;
            // Robot still in process of rolling over
            STATUS_IN_PROGRESS = 2;
            // Robot has failed to roll onto its side
            STATUS_FAILED = 3;
        }
        Status status = 1;
    }
}

// Move the robot into a "ready" position from which it can sit or stand up.
message SelfRightCommand {
    message Request {
        // SelfRight command request takes no additional arguments.
    }

    message Feedback {
        // SelfRight command request provides no feedback.
    }
}

// Stop the robot in place with minimal motion.
message StopCommand {
    message Request {
        // Stop command request takes no additional arguments.
    }

    message Feedback {
        // Stop command provides no feedback.
    }
}

// Freeze all joints at their current positions (no balancing control).
message FreezeCommand {
    message Request {
        // Freeze command request takes no additional arguments.
    }

    message Feedback {
        // Freeze command provides no feedback.
    }
}

// Get robot into a position where it is safe to power down, then power down. If the robot has
// fallen, it will power down directly. If the robot is not in a safe position, it will get to a
// safe position before powering down. The robot will not power down until it is in a safe state.
message SafePowerOffCommand {
    message Request {
        // SafePowerOff command request takes no additional arguments.
    }

    message Feedback {
        // The SafePowerOff will provide feedback on whether or not it has succeeded in powering off
        // the robot yet.

        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;
            // Robot has powered off.
            STATUS_POWERED_OFF = 1;
            // Robot is trying to safely power off.
            STATUS_IN_PROGRESS = 2;
        }
        // Current status of the command.
        Status status = 1;
    }
}

// Move along a trajectory in 2D space.
message SE2TrajectoryCommand {
    message Request {
        // The timestamp (in robot time) by which a command must finish executing.
        // This is a required field and used to prevent runaway commands.
        google.protobuf.Timestamp end_time = 1;

        // The name of the frame that trajectory is relative to. The trajectory
        // must be expressed in a gravity aligned frame, so either "vision",
        // "odom", or "body". Any other provided se2_frame_name will be rejected
        // and the trajectory command will not be exectuted.
        string se2_frame_name = 3;

        // The trajectory that the robot should follow, expressed in the frame
        // identified by se2_frame_name.
        SE2Trajectory trajectory = 2;
    }

    message Feedback {
        // The SE2TrajectoryCommand will provide feedback on whether or not the robot has reached the
        // final point of the trajectory.

        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;

            // The robot has arrived and is standing at the goal.
            STATUS_AT_GOAL = 1;

            // The robot has arrived at the goal and is doing final positioning.
            STATUS_NEAR_GOAL = 3;
            
            // The robot is attempting to go to a goal.
            STATUS_GOING_TO_GOAL = 2;
        }
        // Current status of the command.
        Status status = 1;

        enum BodyMovementStatus {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            BODY_STATUS_UNKNOWN = 0;
            // The robot body is not settled at the goal.
            BODY_STATUS_MOVING = 1;
            // The robot is at the goal and the body has stopped moving.
            BODY_STATUS_SETTLED = 2;

        }
        // Current status of how the body is moving
        BodyMovementStatus body_movement_status = 2;

    }
}

// Move the robot at a specific SE2 velocity for a fixed amount of time.
message SE2VelocityCommand {
    message Request {
        // The timestamp (in robot time) by which a command must finish executing. This is a
        // required field and used to prevent runaway commands.
        google.protobuf.Timestamp end_time = 1;

        // The name of the frame that velocity and slew_rate_limit are relative to.
        // The trajectory must be expressed in a gravity aligned frame, so either
        // "vision", "odom", or "flat_body". Any other provided
        // se2_frame_name will be rejected and the velocity command will not be executed.
        string se2_frame_name = 5;

        // Desired planar velocity of the robot body relative to se2_frame_name.
        SE2Velocity velocity = 2;

        // If set, limits how quickly velocity can change relative to se2_frame_name.
        // Otherwise, robot may decide to limit velocities using default settings.
        // These values should be non-negative.
        SE2Velocity slew_rate_limit = 4;

        // Reserved for deprecated fields.
        reserved 3;
    }

    message Feedback {
        // Planar velocity commands provide no feedback.
    }
}

// Sit the robot down in its current position.
message SitCommand {
    message Request {
        // Sit command request takes no additional arguments.
    }

    message Feedback {
        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;
            // Robot is currently sitting.
            STATUS_IS_SITTING = 1;
            // Robot is trying to sit.
            STATUS_IN_PROGRESS = 2;
        }
        // Current status of the command.
        Status status = 2;
    }
}

// The stand the robot up in its current position.
message StandCommand {
    message Request {
        // Stand command request takes no additional arguments.
    }

    message Feedback {
        // The StandCommand will provide feedback on whether or not the robot has finished
        // standing up.

        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;
            // Robot has finished standing up and has completed desired body trajectory.
            // Robot is not attempting to move.
            STATUS_IS_STANDING = 1;
            // Robot is trying to come to a steady stand.
            STATUS_IN_PROGRESS = 2;
        }
        // Current status of the command.
        Status status = 1;
    }
}

// Precise foot placement
// This can be used to reposition the robots feet in place.
message StanceCommand {
    message Request {
        /// The timestamp (in robot time) by which a command must finish executing.
        /// This is a required field and used to prevent runaway commands.
        google.protobuf.Timestamp end_time = 1;

        Stance stance = 2;
    }

    message Feedback {
        enum Status {
            STATUS_UNKNOWN = 0;
            // Robot has finished moving feet and they are at the specified position
            STATUS_STANCED = 1;
            // Robot is in the process of moving feet to specified position
            STATUS_GOING_TO_STANCE = 2;
            // Robot is not moving, the specified stance was too far away.
            // Hint: Try using SE2TrajectoryCommand to safely put the robot at the
            //       correct location first.
            STATUS_TOO_FAR_AWAY = 3;
        }
        Status status = 1;
    }
}

message Stance {
    // The frame name which the desired foot_positions are described in.
    string se2_frame_name = 3;

    // Map of foot name to its x,y location in specified frame.
    // Required positions for spot: "fl", "fr", "hl", "hr".
    map<string, Vec2> foot_positions = 2;

    // Required foot positional accuracy in meters
    // Advised = 0.05 ( 5cm)
    // Minimum = 0.02 ( 2cm)
    // Maximum = 0.10 (10cm)
    float accuracy = 4;
}

// The base will move in response to the hand's location, allow the arm to reach beyond
// its current workspace.  If the hand is moved forward, the body will begin walking
// forward to keep the base at the desired offset from the hand.
message FollowArmCommand {
    message Request {

        // Optional body offset from the hand.
        // For example, to have the body 0.75 meters behind the hand, use (0.75, 0, 0)
        Vec3 body_offset_from_hand = 1;

        // Optional. If true, the body will be restricted to body orientation offsets only.
        bool disable_walking = 2;
    }

    message Feedback {
        // FollowArmCommand commands provide no feedback.
    }
}

message ArmDragCommand {
    message Request {
    }

    message Feedback {
        enum Status {
            // STATUS_UNKNOWN should never be used. If used, an internal error has happened.
            STATUS_UNKNOWN = 0;
            // Robot is dragging.
            STATUS_DRAGGING = 1;
            // Robot is not dragging because grasp failed.
            // This could be due to a lost grasp during a drag, or because the gripper isn't in a good
            // position at the time of request. You'll have to reposition or regrasp and then send a
            // new drag request to overcome this type of error.
            // Note: When requesting drag, make sure the gripper is positioned in front of the robot (not to the side of or
            // above the robot body).
            STATUS_GRASP_FAILED = 2;
            // Robot is not dragging for another reason.
            // This might be because the gripper isn't holding an item.
            // You can continue dragging once you resolve this type of error (i.e. by sending an ApiGraspOverride request).
            // Note: When requesting drag, be sure to that the robot knows it's holding something (or use APIGraspOverride to
            // OVERRIDE_HOLDING).
            STATUS_OTHER_FAILURE = 3;
        }
        Status status = 1;
    }
}
